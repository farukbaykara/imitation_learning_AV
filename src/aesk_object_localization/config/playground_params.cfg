#!/usr/bin/env python3
PACKAGE = "aesk_object_localization"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

gen.add("min_x", double_t, 0, "ROI min x",    -2, -100,   100)
gen.add("min_y", double_t, 0, "ROI min y",    -3, -100,   100)
gen.add("min_z", double_t, 0, "ROI min z",    -0.1, -100,   100)

gen.add("max_x", double_t, 0, "ROI max x",    15, -100,   100)
gen.add("max_y", double_t, 0, "ROI max y",    3, -100,   100)
gen.add("max_z", double_t, 0, "ROI max z",    10, -100,   100)

gen.add("eps", double_t, 0, "ROI max z",    1, 0,   10000)
gen.add("min_points", int_t, 0, "ROI max z",    5, 0,   10000)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "dynamic_tutorials", "playground_params"))